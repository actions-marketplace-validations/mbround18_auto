name: Auto Release Tool by Intuit
author: mbround18
description: Run Auto by Intuit on your repo
branding:
  icon: arrow-up
  color: purple
inputs:
  jqVersion:
    description: "Version if jq to use"
    required: true
    default: "1.6"
  autoVersion:
    description: "Version of auto to install"
    required: true
    default: "latest"
  token:
    description: "Admin Pat to use"
    required: true
  command:
    description: "Auto command to run"
    required: true
    default: "shipit -v"
outputs:
  version:
    description: "Outputs the auto version."
    value: ${{ steps.auto.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Setup Bins
      shell: sh
      run: |
        export BIN_PATH="${GITHUB_ACTION_PATH}/.bin"
        mkdir -p "${BIN_PATH}"
        echo "${BIN_PATH}" >> $GITHUB_PATH

    - name: Setup JQ
      shell: sh
      if: inputs.autoVersion == 'latest'
      run: |
        echo "Setting jq path..."
        export JQ_PATH="${GITHUB_ACTION_PATH}/.bin/jq"
        echo "JQ_PATH=${JQ_PATH}"
        echo "Downloading jq..."
        wget -O "${JQ_PATH}" "https://github.com/stedolan/jq/releases/download/jq-${{inputs.jqVersion}}/jq-linux64"
        echo "Making jq exectuabe..."
        chmod +x "${JQ_PATH}"
        echo "jq setup complete..."

    - name: Setup Auto
      shell: sh
      run: |
        echo "Setting auto path..."
        export AUTO_PATH="${GITHUB_ACTION_PATH}/.bin/auto"
        echo "AUTO_PATH=${AUTO_PATH}"

        export AUTO_URL=""
        echo "Downloading auto..."
        if [ "${{ inputs.autoVersion }}" = "latest" ]; then
          echo "Fetching latest auto release..."
          export LATEST_TAG="$(curl https://api.github.com/repos/intuit/auto/releases/latest -s | jq .name -r | xargs)"
          AUTO_URL="https://github.com/intuit/auto/releases/download/${LATEST_TAG}/auto-linux.gz"
        else
          AUTO_URL="https://github.com/intuit/auto/releases/download/${{ inputs.autoVersion }}/auto-linux.gz"
        fi
        curl -vkL -o - "${AUTO_URL}" | gunzip > "${AUTO_PATH}"
        echo "Making auto executable..."
        chmod +x "${AUTO_PATH}"
        echo "auto setup complete..."

    - name: Setup Bins
      id: auto
      shell: sh
      env:
        GH_TOKEN: "${{ inputs.token }}"
      run: |
        OUTPUT_FILE="/tmp/auto.out"
        
        lineExists() {
          LINE="$1"
          FILE="$2"
          case $(grep -F "${LINE}" "${FILE}" >/dev/null; echo $?) in
            0)
              echo 0
            ;;
            1)
              echo 1
            ;;
            *)
              echo 1
            ;;
          esac
        }
        
        getVersion() {
          LINE="$1"
          FILE="$2"
          PREFIX="$3"
          grep -hnr -A2 -B2 --no-group-separator "${LINE}" < "${FILE}" | grep "${PREFIX}" | cut -d ":" -f2 | xargs
        }
        
        cleanup() {
          EXIT_STATUS=$?  # Eg 130 for SIGINT, 128 + (2 == SIGINT)
          if [ ! "$EXIT_STATUS" -eq 0 ]; then
            exit ${EXIT_STATUS}
          else
            echo "Looks like auto ran successfully! Collecting results for action output."
          fi
        
          NO_CANARY="None of the plugins that you are using implement the \`canary\` command"
          CALLING_CANARY="Calling canary hook"
          CREATED_RELEASE="Created GitHub release"
        
          VERSION=""
          IS_NOT_CANARY=$(lineExists "${NO_CANARY}" "${OUTPUT_FILE}")
          IS_CANARY=$(lineExists "${CALLING_CANARY}" "${OUTPUT_FILE}")
          
          if [ "${IS_NOT_CANARY}" -eq 0 ]; then
            echo "No canary found, no version info needed."
            VERSION=
          elif [ "${IS_CANARY}" -eq 0 ]; then
            echo "Canary found! Grabbing canary version for action output.."
            VERSION="sha-$(getVersion "${CALLING_CANARY}" "${OUTPUT_FILE}" "HEAD:")"
          else
            echo "Version Tagged! Grabbing tag for action output."
            VERSION="$(getVersion "${CREATED_RELEASE}" "${OUTPUT_FILE}" "tag:")"
          fi
        
          echo "::set-output name=version::${VERSION}"
          echo "Exit Code=${EXIT_STATUS}"
          echo "Version=${VERSION}"
          exit ${EXIT_STATUS}
        }

        # Setting up script traps
        trap 'cleanup' EXIT INT TERM

        # Launch Auto
        auto ${{ inputs.command }} 2>&1 | tee "${OUTPUT_FILE}"
