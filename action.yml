name: Auto Release Tool by Intuit
author: mbround18
description: Run Auto by Intuit on your repo
branding:
  icon: arrow-up
  color: purple
inputs:
  jqVersion:
    description: "Version if jq to use"
    required: true
    default: "1.6"
  autoVersion:
    description: "Version of auto to install"
    required: true
    default: "latest"
  token:
    description: "Admin Pat to use"
    required: true
  command:
    description: "Auto command to run"
    required: true
    default: "shipit -v"
outputs:
  version:
    description: "Outputs the auto version."
    value: ${{ steps.version.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Setup Bins
      shell: sh
      run: |
        echo "::group::Setup Bin Folder"
        . "${GITHUB_ACTION_PATH}/utils.sh"
        setup
        echo "${BIN_PATH}" >> $GITHUB_PATH
        echo "::endgroup::"

    - name: Setup JQ
      shell: sh
      if: inputs.autoVersion == 'latest'
      run: |
        echo "::group::Setup jq"
        . "${GITHUB_ACTION_PATH}/utils.sh"
        downloadBinary "stedolan" "jq" "jq" "jq-${{inputs.jqVersion}}" "jq-linux64"
        echo "::endgroup::"

    - name: Setup Auto
      shell: sh
      run: |
        echo "::group::Setup auto"
        . "${GITHUB_ACTION_PATH}/utils.sh"
        downloadAsset "intuit" "auto" "auto" "${{ inputs.autoVersion }}" "auto-linux.gz"
        echo "::endgroup::"

    - name: Run Auto
      id: auto
      shell: bash
      env:
        GH_TOKEN: "${{ inputs.token }}"
      run: |
        echo "::group::Run Auto"
        set -o pipefail

        OUTPUT_FILE="/tmp/auto.out"
        auto ${{ inputs.command }} 2>&1 | tee "${OUTPUT_FILE}"
        exit $?
        echo "::endgroup::"

    - name: Action Paths
      id: action-path
      shell: sh
      run: echo "::set-output name=bin::$(realpath "${{ github.action_path }}/.bin")"

    - name: Cache Powershell
      uses: actions/cache@v3
      with:
        path: ${{ steps.action-path.outputs.bin }}
        key: ${{ runner.os }}-PowerShell

    - name: Check & Setup PowerShell
      shell: sh
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        if ! [ -x "$(command -v pwsh)" ]; then
          echo "::group::Setup PowerShell"
          . "${GITHUB_ACTION_PATH}/utils.sh"
          downloadAsset "PowerShell" "PowerShell" "pwsh" "${{ inputs.autoVersion }}" "powershell-{VERSION_NO_PREFIX}-linux-x64.tar.gz"
          echo "::endgroup::"
        fi

    - name: Parse Version
      shell: pwsh
      id: version
      run: |
        Write-Output "::group::Parse Version"

        $File = "/tmp/auto.out"
        $Version = ""

        function parse {
          param (
           $File,
            $Pattern,
            $SubPattern
          )
          $FileContent = (Select-String $File -Context 2 -Pattern $Pattern)
          return $FileContent | Out-String | Select-String -Pattern $SubPattern
        }
          
        $Options = @( @{
          Pattern = "Calling canary hook"
          SubPattern = "HEAD:"
          Matcher = "got commit sha from head: (.+)"
          Prefix = "sha-"
        },@{
          Pattern = "Created GitHub release"
          SubPattern = "tag:"
          Matcher = "Creating release on GitHub for tag: (v.+)"
        })
          
        $Options | ForEach-Object {
          $Out = parse -File $File -Pattern $_.Pattern -SubPattern $_.SubPattern
          if ($Out -match $_.Matcher) {
            $Revision = ($Matches[1] | Out-String)
            if ($_.Prefix) {
              $Version = $_.Prefix + $Revision
            } else {
              $Version = $Revision
            }
          }
        }
        Write-Output "Version=$Version"
        Write-Output "::set-output name=version::$Version"
        Write-Output "::endgroup::"
